From Coq Require Import ZArith List.
From compcert.lib Require Import Integers Maps.
From compcert.common Require Import Memory AST.
From bpf.model Require Import rBPFCommType rBPFSyntax rBPFDecoder.


Import ListNotations.
Notation "x /\ y" := (andb x y).

Definition disassemble_lddw (i1 i2 : int64) : option bpf_instruction :=
  let opc1 : u8  := Byte.repr (Int64.unsigned (decode_bpf i1 0 8)) in
  let dv1  : u4  := Z.to_nat (Int64.unsigned (decode_bpf i1 8 4)) in
  let sv1  : u4  := Z.to_nat (Int64.unsigned (decode_bpf i1 12 4)) in
  let off1 : i16 := Word.repr (Int64.signed (decode_bpf i1 16 16)) in
  let imm1 : int := Int.repr (Int64.signed (decode_bpf i1 32 32)) in
  let opc2 : u8  := Byte.repr (Int64.unsigned (decode_bpf i2 0 8)) in
  let dv2  : u4  := Z.to_nat (Int64.unsigned (decode_bpf i2 8 4)) in
  let sv2  : u4  := Z.to_nat (Int64.unsigned (decode_bpf i2 12 4)) in
  let off2 : i16 := Word.repr (Int64.signed (decode_bpf i2 16 16)) in
  let imm2 : int := Int.repr (Int64.signed (decode_bpf i2 32 32)) in
  if sv1 =? 0 /\ (Word.eq off1 Word.zero) /\ (Byte.eq opc2 Byte.zero) /\ dv2 =? 0 /\ sv2 =? 0 /\ (Word.eq off2 Word.zero) then
    match u4_to_bpf_ireg dv1 with
    | None => None
    | Some d => Some (BPF_LD_IMM d imm1 imm2)
    end
  else
    None.

Definition disassemble_one_instruction (data : int64) : option bpf_instruction :=
  let opc : u8  := Byte.repr (Int64.unsigned (decode_bpf data 0 8)) in
  let dv  : u4  := Z.to_nat (Int64.unsigned (decode_bpf data 8 4)) in
  let sv  : u4  := Z.to_nat (Int64.unsigned (decode_bpf data 12 4)) in
  let off : i16 := Word.repr (Int64.signed (decode_bpf data 16 16)) in
  let imm : int := Int.repr (Int64.signed (decode_bpf data 32 32)) in
  if orb (Nat.ltb 10 dv) (Nat.ltb 10 sv) then
    None
  else
    if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x07) then
      if dv =? 11 then
        Some (BPF_ADD_STK imm)
      else
        match u4_to_bpf_ireg dv with
        | None => None
        | Some dst => Some (BPF_ALU64 BPF_ADD dst (SOImm imm))
        end
    else
      match u4_to_bpf_ireg dv with
      | None => None
      | Some dst =>
        match u4_to_bpf_ireg sv with
        | None => None
        | Some src =>
            if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x71) then
              if Int.eq imm Int.zero then
                Some (BPF_LDX Mint8unsigned dst src off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x69) then
              if Int.eq imm Int.zero then
                Some (BPF_LDX Mint16unsigned dst src off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x61) then
              if Int.eq imm Int.zero then
                Some (BPF_LDX Mint32 dst src off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x79) then
              if Int.eq imm Int.zero then
                Some (BPF_LDX Mint64 dst src off)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x72) then
              if sv =? 0 then
                Some (BPF_ST Mint8unsigned dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6a) then
              if sv =? 0 then
                Some (BPF_ST Mint16unsigned dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x62) then
              if sv =? 0 then
                Some (BPF_ST Mint32 dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7a) then
              if sv =? 0 then
                Some (BPF_ST Mint64 dst (SOImm imm) off)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x73) then
              if Int.eq imm Int.zero then
                Some (BPF_ST Mint8unsigned dst  (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6b) then
              if Int.eq imm Int.zero then
                Some (BPF_ST Mint16unsigned dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x63) then
              if Int.eq imm Int.zero then
                Some (BPF_ST Mint32 dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7b) then
              if Int.eq imm Int.zero then
                Some (BPF_ST Mint64 dst (SOReg src) off)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x04) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_ADD dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x0c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_ADD dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x14) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_SUB dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x1c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_SUB dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x24) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_MUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x2c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_MUL dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x34) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_DIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x3c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_DIV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x44) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_OR dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x4c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_OR dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x54) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_AND dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x5c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_AND dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x64) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_LSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_LSH dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x74) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_RSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_RSH dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x84) then
              if andb (andb (Int.eq imm Int.zero) (Word.eq off Word.zero)) (sv =? 0) then
                Some (BPF_NEG32_REG dst)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x94) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_MOD dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x9c) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_MOD dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xa4) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_XOR dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xac) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_XOR dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xb4) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_MOV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xbc) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_MOV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xc4) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU BPF_ARSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xcc) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU BPF_ARSH dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xd4) then
              if andb (sv =? 0) (Word.eq off Word.zero) then
                Some (BPF_LE            dst imm)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xdc) then
              if andb (sv =? 0) (Word.eq off Word.zero) then
                Some (BPF_BE            dst imm)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x07) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_ADD dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x0f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_ADD dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x17) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_SUB dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x1f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_SUB dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x27) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_MUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x2f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_MUL dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x37) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_DIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x3f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_DIV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x47) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_OR dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x4f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_OR dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x57) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_AND dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x5f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_AND dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x67) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_LSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_LSH dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x77) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_RSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_RSH dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x87) then
              if andb (andb (Int.eq imm Int.zero) (Word.eq off Word.zero)) (sv =? 0) then
                Some (BPF_NEG64_REG dst)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x97) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_MOD dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x9f) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_MOD dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xa7) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_XOR dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xaf) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_XOR dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xb7) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_MOV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xbf) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_MOV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xc7) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_ALU64 BPF_ARSH dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xcf) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_ALU64 BPF_ARSH dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xf7) then
              if andb (Word.eq off Word.zero) (sv =? 0) then
                Some (BPF_HOR64_IMM     dst imm)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x86) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR BPF_LMUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x8e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR BPF_LMUL dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x96) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR64 BPF_LMUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x9e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR64 BPF_LMUL dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x36) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR2 BPF_UHMUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x3e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR2 BPF_UHMUL dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xb6) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR2 BPF_SHMUL dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xbe) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR2 BPF_SHMUL dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x46) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR BPF_UDIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x4e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR BPF_UDIV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x56) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR64 BPF_UDIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x5e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR64 BPF_UDIV dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x66) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR BPF_UREM dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR BPF_UREM dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x76) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR64 BPF_UREM dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7e) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR64 BPF_UREM dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xc6) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR BPF_SDIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xce) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR BPF_SDIV dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xd6) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR64 BPF_SDIV dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xde) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR64 BPF_SDIV dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xe6) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR BPF_SREM dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xee) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR BPF_SREM dst (SOReg src))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xf6) then
              if andb (Int.eq imm Int.zero) (sv =? 0) then
                Some (BPF_PQR64 BPF_SREM dst (SOImm imm))
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xfe) then
              if andb (Int.eq imm Int.zero) (Word.eq off Word.zero) then
                Some (BPF_PQR64 BPF_SREM dst (SOReg src))
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x05) then
              if andb (andb (Int.eq imm Int.zero) (dv=? 0)) (sv =? 0) then
                Some (BPF_JA off)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x15) then
              if sv =? 0 then
                Some (BPF_JUMP Eq  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x1d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Eq  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x25) then
              if sv =? 0 then
                Some (BPF_JUMP Gt  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x2d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Gt  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x35) then
              if sv =? 0 then
                Some (BPF_JUMP Ge  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x3d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Ge  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xa5) then
              if sv =? 0 then
                Some (BPF_JUMP Lt  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xad) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Lt  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xb5) then
              if sv =? 0 then
                Some (BPF_JUMP Le  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xbd) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Le  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x45) then
              if sv =? 0 then
                Some (BPF_JUMP SEt dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x4d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP SEt dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x55) then
              if sv =? 0 then
                Some (BPF_JUMP Ne  dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x5d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP Ne  dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x65) then
              if sv =? 0 then
                Some (BPF_JUMP SGt dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x6d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP SGt dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x75) then
              if sv =? 0 then
                Some (BPF_JUMP SGe dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x7d) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP SGe dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xc5) then
              if sv =? 0 then
                Some (BPF_JUMP SLt dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xcd) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP SLt dst (SOReg src) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xd5) then
              if sv =? 0 then
                Some (BPF_JUMP SLe dst (SOImm imm) off)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0xdd) then
              if Int.eq imm Int.zero then
                Some (BPF_JUMP SLe dst (SOReg src) off)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x8d) then
              if andb (dv=? 0) (Word.eq off Word.zero) then
                Some (BPF_CALL_REG src imm)
              else
                None
            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x85) then
              if andb (dv=? 0) (Word.eq off Word.zero) then
                Some (BPF_CALL_IMM src imm)
              else
                None

            else if Z.eqb (Byte.unsigned opc) (Z.of_nat 0x95) then
              if andb (andb (andb (Int.eq imm Int.zero) (Word.eq off Word.zero)) (sv =? 0)) (dv=? 0) then
                Some BPF_EXIT
              else
                None
            else
              None
          end
        end.

Fixpoint disassemble (l : list int64) : option ebpf_asm :=
  match l with
  | nil => Some nil
  | h :: t => 
      let opc : u8  := Byte.repr (Int64.unsigned (decode_bpf h 0 8)) in
      if Byte.eq opc (Byte.repr 0x18%Z) then
        match t with
        | nil => None
        | h1 :: t1 =>
            match disassemble_lddw h h1 with
            | None => None
            | Some ins =>
                match disassemble t1 with
                | None => None
                | Some t2 => Some (ins :: t2)
                end
            end
        end
      else
        match disassemble_one_instruction h with
        | None => None
        | Some ins =>
            match disassemble t with
            | None => None
            | Some t2 => Some (ins :: t2)
            end
        end
  end.










